<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>par_players</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
grav = 0.2;
hsp = 0;
vsp = 0;
movespeed = 4;
movespeed_normal = movespeed;
movespeed_powerup = 20;

jumpspeed_normal = 7;
jumpspeed_powerup = 10;
global.jumpspeed_boss = 5;

jumpspeed = jumpspeed_normal;


if (global.rememberlevelup != 0)
{

global.levelup = global.rememberlevelup;

}
else
{



}

if (global.checkpointR == room)
{
    x = global.checkpointx;
    y = global.checkpointy;
}

vsp = 0;
hsp = 0;
grav = 0.2;
grounded = 0;
flip = 1;
ladder = false;
lifetotal = "3";
global.portalable = true;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.canshoot = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>movespeed = movespeed_normal;
sprite_index = spr_player;
global.speedup = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.portalable = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>jumpspeed = jumpspeed_normal;
sprite_index = spr_player;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Get the player's input
Key_Left    =   keyboard_check_direct(ord('Q')) || gamepad_button_check(0,gp_shoulderl)
Key_Right   =   keyboard_check_direct(ord('D')) || gamepad_button_check(0,gp_shoulderr); 
// Key_Jump    =   keyboard_check_pressed(vk_space) || gamepad_button_check(0,gp_face1);
Key_Up      =   keyboard_check_direct(ord('Z')) || gamepad_button_check(0,gp_shoulderlb);
Key_Down    =   keyboard_check_direct(ord('S')) || gamepad_button_check(0,gp_shoulderrb);
Key_Jump    =   keyboard_check_pressed(vk_space) || keyboard_check_direct(ord('W')) || keyboard_check_direct(ord('X')) || gamepad_button_check(0,gp_face1);
Key_Shoot   =   keyboard_check_direct(vk_rcontrol) || gamepad_button_check(0,gp_face2);
Key_Run = keyboard_check_direct(vk_rshift) || gamepad_button_check(0,gp_start);
Key_Save = keyboard_check_direct(ord('T')) || gamepad_button_check(0,gp_face3)
Key_Load = keyboard_check_direct(ord('Y')) || gamepad_button_check(0,gp_face4)

if (gamepad_axis_value(0, gp_axislh) = 0)
{

}
else if (gamepad_axis_value(0, gp_axislh) &gt; 0)
{
Key_Left = 1;
}
else
{
Key_Right = 1;
}

if (gamepad_axis_value(0, gp_axislv) = 0)
{

}
else if (gamepad_axis_value(0, gp_axislv) &gt; 0)
{
Key_Up = 1;
}
else
{
Key_Down = 1;
}

/*

gp_padl = Left
gp_padr = Right
gp_padu = Up
gp_padd = Down
gp_face1 = Jump
gp_face2 = Shoot
gp_face3 = Run



*/


if (global.onePlayer)
{
Key_Left    =   keyboard_check_direct(vk_left);
Key_Right   =   keyboard_check_direct(vk_right);
Key_Up      =   keyboard_check_direct(vk_up);
Key_Down    =   keyboard_check_direct(vk_down);
}
else
{
Key_Left    =   keyboard_check_direct(ord('Q'));
Key_Right   =   keyboard_check_direct(ord('D'));
Key_Up      =   keyboard_check_direct(ord('Z'));
Key_Down    =   keyboard_check_direct(ord('S'));
};
//
if (Key_Save)
{

scr_save();


}
if (Key_Load)
{

scr_load();


}


if (global.speedup)
{

}
else
{


movespeed = 4;
}
move = 0;
if (!global.speedup)
{
if (global.levelup = 1)
{

sprite_index = spr_up_one;
jumpspeed = 8;
}
else
{
if (global.levelup = 2)
{
sprite_index = spr_up_two;
jumpspeed = 8;
scr_shoot();
}
}
}
//

//React to inputs
/*
move = Key_Left + Key_Right;

*/
//Move left and right
if (Key_Left)
{
    hsp = -2;
    flip = -1;
    move = -1;
}

if (Key_Right)
{
    hsp = 2;
    flip = 1;
    move = 1;
} 

hsp = move * movespeed;
if (vsp &lt; 10) vsp += grav;
// 
//

if (place_meeting(x,y+1,par_wall))
{
    vsp = Key_Jump * -jumpspeed
}

//Ladder
if (Key_Up || Key_Down)
{
    if place_meeting(x,y,par_ladder) ladder = true;
}

if (ladder)
{
    vsp = 0;
    //hsp = 0;
    if (Key_Up) vsp = -2;
    if (Key_Down) vsp = 2;
    if !place_meeting(x,y,par_ladder) ladder = false;    
    if (Key_Jump) ladder = false;
}

//Horizontal Collision
if (place_meeting(x+hsp,y,par_wall))
{
    while(!place_meeting(x+sign(hsp),y,par_wall))
    {
        x += sign(hsp);
    }
    hsp = 0;
}
x += hsp;

// HC2

//Horizontal Collision
var hcollide;
hcollide = instance_place(x+hsp,y,par_wall);
if (hcollide != noone)
{
    if ((hcollide).type == 1)
        {
            yplus = 0;
            while (place_meeting(x+hsp,y-yplus,par_wall) &amp;&amp; yplus &lt;= abs(1*hsp)) yplus += 1;
            if place_meeting(x+hsp,y-yplus,par_wall)
            {
                while (!place_meeting(x+sign(hsp),y,par_wall)) x+=sign(hsp);
                hsp = 0;
            }
            else
            {
                y -= yplus
            }
        }
}
x += hsp;


//Vertical Collision
if (place_meeting(x,y+vsp,par_wall))
{
    while(!place_meeting(x,y+sign(vsp),par_wall))
    {
        y += sign(vsp);
    }
    vsp = 0;
}
y += vsp;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
if (room =! rm_second)
{
if (flip = -1)
{

image_xscale = -1;

}
else if (flip = 1)
{

image_xscale = 1;

}
}
else
{
image_xscale = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
